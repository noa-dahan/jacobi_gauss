
#aij=pivot
def check_diagonal_dominant(A):
    n = len(A)
    for i in range(n):
        row_sum = 0
        for k in range(n):
            if i != k:
                row_sum += abs(A[i][k])
        if abs(A[i][i]) <= row_sum:
            return False
    return True

Xr_1 = lambda x, y, z: (b[0] - A[0][1] * y - A[0][2] * z) / A[0][0]
Yr_1 = lambda x, y, z: (b[1] - A[1][0] * x - A[1][2] * z) / A[1][1]
Zr_1 = lambda x, y, z: (b[2] - A[2][0] * x - A[2][1] * y) / A[2][2]

def Jacobi(epsilon):
    count=0
    x_first = 0
    y_first = 0
    z_first = 0
    stop=True
    while stop:
        x_next = Xr_1(x_first, y_first, z_first)
        x_next = round(x_next, 6)
        y_next = Yr_1(x_first, y_first, z_first)
        y_next = round(y_next, 6)
        z_next = Zr_1(x_first, y_first, z_first)
        z_next = round(z_next, 6)
        error1 = abs(x_next - x_first)
        error2 = abs(y_next - y_first)
        error3 = abs(z_next - z_first)
        x_first = x_next
        y_first = y_next
        z_first = z_next

        if error1 < epsilon and error2 < epsilon and error3 < epsilon :
            stop = False

    print("x=%0.6f" % (x_next))
    print("y=%0.6f" % (y_next))
    print("z=%0.6f" % (z_next))

def Gauss(epsilon):
    count = 0
    x_first = 0
    y_first = 0
    z_first = 0
    stop = True
    while stop:
        x_next = Xr_1(x_first, y_first, z_first)
        x_next=round(x_next, 6)
        y_next = Yr_1(x_next, y_first, z_first)
        y_next=round(y_next, 6)
        z_next = Zr_1(x_next, y_next, z_first)
        z_next=round(z_next, 6)
        error1 = abs(x_next - x_first)
        error2 = abs(y_next - y_first)
        error3 = abs(z_next - z_first)
        x_first = x_next
        y_first = y_next
        z_first = z_next
        count += 1
        if error1 < epsilon and error2 < epsilon and error3 < epsilon:
            stop = False

    print("x=%0.6f" % (x_next))
    print("y=%0.6f" % (y_next))
    print("z=%0.6f" % (z_next))

A = [[4, 2, 0], [2, 10, 4], [0, 4, 5]]
b = [2, 6, 5]
epsilon=0.001
A1=[[1,1,-2],[0,1,-1],[3,-1,1]]
b1=[-3,-1,4]


if not check_diagonal_dominant(A):
    print( "Error ! No dominant diagonal")
    exit(0)
else :
    print("The solution in jacobi is:")
    Jacobi(epsilon)
    print("The solution in Gauss is:")
    Gauss( epsilon)
